//
// Generated file, do not edit! Created by opp_msgc 4.1 from messages/Burst.msg.
//

#ifndef _BURST_M_H_
#define _BURST_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>messages/Burst.msg</tt> by opp_msgc.
 * <pre>
 * message Burst {
 *     @customize(true);  
 *     int maxByteLength @unit("B");
 * }
 * </pre>
 *
 * Burst_Base is only useful if it gets subclassed, and Burst is derived from it.
 * The minimum code to be written for Burst is the following:
 *
 * <pre>
 * class Burst : public Burst_Base
 * {
 *   public:
 *     Burst(const char *name=NULL, int kind=0) : Burst_Base(name,kind) {}
 *     Burst(const Burst& other) : Burst_Base(other.getName()) {operator=(other);}
 *     Burst& operator=(const Burst& other) {Burst_Base::operator=(other); return *this;}
 *     virtual Burst *dup() const {return new Burst(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Burst_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Burst);
 * </pre>
 */
class Burst_Base : public ::cMessage
{
  protected:
    int maxByteLength_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Burst_Base&);
    // make constructors protected to avoid instantiation
    Burst_Base(const char *name=NULL, int kind=0);
    Burst_Base(const Burst_Base& other);
    // make assignment operator protected to force the user override it
    Burst_Base& operator=(const Burst_Base& other);

  public:
    virtual ~Burst_Base();
    virtual Burst_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class Burst");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getMaxByteLength() const;
    virtual void setMaxByteLength(int maxByteLength_var);
};


#endif // _BURST_M_H_
